using System.Reflection.Metadata;
using System.Reflection.Metadata.Ecma335;

roUtil ro = new();
Dictionary<string, double[]> gwDB = [];


//ro.PrintList(gwans.ToList());


void InitGwanDB()
{
    var DAYS = new int[] { 10, 20, 30, 40, 60 };
    var GAPS = new int[] { 3, 5, 10, 15, 20 };

    string path = "C:/_HDD";
    var gwans = ro.ReadDict($"{path}/DCT/DATA/good_base.csv");
    Console.WriteLine("[] Init Gwans - data recv and pre-calc."  );
    foreach (var gwan in gwans)
    {
        string code = gwan.Key;
        gwDB[code] = [];

        Console.WriteLine($"{code}");

        var df = ro.ReadDict($"{path}/DCT/DATA/stockD/{code}.csv");
        //gwDB[code].Add("pcD", df["pc"].ConvertAll(double.Parse).ToList());
        gwDB[code]["pcD"] = df["pc"].ConvertAll(double.Parse);

        // pre-calc ma & v
        int n = gwDB[code]["pcD"].Count;
        foreach (var day in DAYS)
        {
            gwDB[code][$"ma{day}"] = new List<double>(new double[n]);
            gwDB[code][$"v{day}"] = new List<double>(new double[n]);
            var xx = Generate.LinearSpaced(day, 0.0, 1.0);

            for (int i=day; i<n; i++) 
            {              
                gwDB[code][$"ma{day}"][i] = gwDB[code]["pcD"][(i-day)..i].Average();
                gwDB[code][$"v{day}"][i] = MathNet.Numerics.Fit.Line(xx, gwDB[code]["pcD"][(i - day)..i])[1];

            }
        }
        
    }


}


// buy  : pc < maB-gapB && vBuy > 0
// sell : pc > maS+gapS && vSell < 0
// dna [maDayB, gapB, vDayB, maDayS, gapS, vDayS] 
// ma, v Day [10, 20, 30, 40, 50, 60]          5 ~ 60
// gap       [3%, 5%, 7.5%, 10%, 15%, 20%]     0.01 ~ 0.20%
double TestDNA(double[] pcD, double[] dna)
{
    double maDayB = dna[0], gapB = dna[1], vDayB = dna[2];
    double maDayS = dna[3], gapS = dna[4], vDayS = dna[5];

    double maxDay = dna.Max();
    double earning = 0.0;
    for (int i = (int)maxDay; i<pcD.Length; i++)
    {

    }


    return 0.0;
}




// [ A123456 ]   
//       0.05%       0.10       
// 10 0.05 10.3) (10 0.05 10.3) (10 0.05 10.3) (10 0.05 10.3) (10 0.05 10.3)
// 20
// 30


//var df = ro.ReadDictString($"C:/_HDD/DCT/stock/A069500.csv");
//var pcD = df["pc"].ConvertAll(double.Parse).ToArray();

//Console.WriteLine($"{pcD[0]} ~ {pcD[1]}");
//var days = new int[] {10, 20, 40, 60, 90, 120};
//var gaps = new double[] {0.05, 0.10, 0.15, 0.20, 0.25, 0.30};

//Console.Write($"     ");
//foreach (var gap in gaps) Console.Write($"{gap}      ");
//Console.WriteLine();
//foreach (var day in days)
//{
//    Console.Write($" {day,2}   ");

//    foreach (var gap in gaps)
//    {
//        Console.Write($"{CalcEarnModel(day, gap),9:F0} ");
//    }
//    Console.WriteLine();
//}


//// return : earning, no_buy, no_sell
//double CalcEarnModel(int day, double gap)
//{
//    var n = pcD.Length;

//    int no_buy = 0, no_sell = 0, n_hold = 0;
//    double ttl_buy = 0, ttl_sell = 0;
//    double earning = 0.0;
//    for (int i = day; i<n; i++)
//    {
//        var cur = pcD[(i-day)..i].ToList();
//        var ma = cur.Average();
//        var pc = pcD[i];

//        // buy 
//        if (pc < ma*(1-gap))
//        {
//            no_buy++;
//            n_hold += 1;
//            ttl_buy += pc * 1;
//        }

//        // sell all
//        if ((pc > ma*(1+gap)) && n_hold>0)
//        {
//            no_sell++;

//            ttl_sell += pc * n_hold;
//            n_hold = 0;

//        }
//    }

//    // last hold
//    ttl_sell += n_hold * pcD[^1];

//    //earning = ttl_sell / ttl_buy;
//    earning = (ttl_sell - ttl_buy);
//    if (no_buy < 10) { earning = -9;  };

//    return earning;
//}
