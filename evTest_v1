using MathNet.Numerics;
using System.IO;
using System.Linq;
using System.Net.WebSockets;
using System.Reflection.Metadata;
using System.Reflection.Metadata.Ecma335;
using System.Runtime.InteropServices;

roUtil ro = new();
Dictionary<string, Dictionary<string, List<double>>> gwDB = [];


int[] DAYS = [ 5, 10, 20, 40, 60 ];
int[] GAPS = [ 3, 5, 10, 15, 20 ];


InitGwanDB();
Model_DNA1 model = new();

string code = "A069500";
for (int i=0; i<10; i++) {
    var dna = model.MakeNewDNA();

    var k = model.GetState(gwDB[code], 100, 8);
    Console.WriteLine($"{string.Join(",", dna)} - {k} ");
   

}

// =======================================================================================



void InitGwanDB()
{
    string PATH = "C:/_HDD";
    string[] gwan_codes = ["A069500", "A000270", "A360750"];

    Console.WriteLine($"[] Init gwan properties.");
    foreach (var code in gwan_codes) {
        gwDB[code] = [];
        var cur = gwDB[code];

        // pcD norm
        var df = ro.ReadDict($"{PATH}/DCT/DATA/stockD/{code}.csv");
        cur["pcD"] = df["pc"].ConvertAll(double.Parse);

        int N = cur["pcD"].Count;
        var pRef = cur["pcD"].Average();
        for ( var i = 0; i<N; i++ ) cur["pcD"][i] /= pRef;

        // ma, v, sep
        foreach (var day in DAYS) {
            cur[$"ma{day}"] = new List<double>(new double[N]);
            cur[$"sep{day}"] = new List<double>(new double[N]);
            cur[$"v{day}"] = new List<double>(new double[N]);

            var xx = Generate.LinearSpaced(day, 0.0, 1.0);

            for (int i = day; i < N; i++) {
                cur[$"ma{day}"][i] = cur["pcD"][(i - day)..i].Average();
                cur[$"sep{day}"][i] = (cur["pcD"][i] - cur[$"ma{day}"][i]) / cur["pcD"][i] * 100.0;
                cur[$"v{day}"][i] = Fit.Line(xx, [.. cur["pcD"][(i - day)..i]]).B;
            }
        }

        // UpI
        cur["UpI"] = new List<double>(new double[N]);
        foreach (var day in DAYS) {
            for (int i = day; i < N; i++) {
                if (cur["pcD"][i] > cur[$"ma{day}"][i]) cur["UpI"][i] += 1.0;
                if (cur[$"v{day}"][i] > 0.0) cur["UpI"][i] += 1.0;
            }
        }

        Console.WriteLine($" {code} : ma20 {cur["ma20"][^1]:F2}  v20 {cur["v20"][^1]:F2}  UpI {cur["UpI"][^1]:F0} ");
    }

}

public class Model_DNA1 {
    

    //string[] GENE_U = ["U0+", "U1+", "U2+", "U3+", "U4+", "U5+", "U6+", "U7+", "U8+", "U9+", "U10+",
    //                   "U0-", "U1-", "U2-", "U3-", "U4-", "U5-", "U6-", "U7-", "U8-", "U9-", "U10-"];       // U5+=5~  U5-=~5
    //string[] GENE_S = ["sep5+", "sep10+", "sep20+", "sep40+", "sep60+", "sep5-", "sep10-", "sep20-", "sep40-", "sep60-"];
    //string[] GENE_V = ["v5+", "v10+", "v20+", "v40+", "v60+", "v5-", "v10-", "v20-", "v40-", "v60-"];


    // DNA = B 30 genes / 11 genes pool : UpI [1]x2(+/-), maD-->sep [5]x2(+/-), vD [5]x2(+/-)
    // make DNA (8 genes) =  B upI [2: 6+, 2-] + sep [3: 5+ 10- 20+] + vD [3: 3] = List<string>

    public List<int> MakeNewDNA() {
        Random rand = new Random();

        List<int> new_dna = [];

        var r = rand.Next(10);  new_dna.Add(r);
        r = rand.Next(11, 21);  new_dna.Add(r);
        for (int i = 0; i < 3; i++) { r = rand.Next(0, 9); new_dna.Add(100+r); }
        for (int i = 0; i < 3; i++) { r = rand.Next(0, 9); new_dna.Add(200+r); }

        return new_dna;
    }

    public double GetState(Dictionary<string, List<double>> cur, int x, int gene) { 
        double state = 0;

        if (gene <= 21) {
            state = cur["UpI"][x];
        }




        return state;
    }

    



}


// int n = gwDB[code]["pcD"].Count;
//    var cnt = 0;
//    foreach (var day in DAYS)
//    {
//        gwDB[code][$"ma{day}"] = new List<double>(new double[n]);
//        gwDB[code][$"v{day}"] = new List<double>(new double[n]);
//        var xx = Generate.LinearSpaced(day, 0.0, 1.0);

//        for (int i=day; i<n; i++) 
//        {              
//            gwDB[code][$"ma{day}"][i] = gwDB[code]["pcD"][(i-day)..i].Average();
//            gwDB[code][$"v{day}"][i] = Fit.Line(xx, gwDB[code]["pcD"][(i - day)..i].ToArray()).B;


//            if (day == 60)
//            {
//                if (gwDB[code]["pcD"][i] > gwDB[code][$"ma{day}"][i]) cnt++;
//            }

//        }
//        Console.Write($"ma{day} v{day} ");
//    }
//    Console.WriteLine($"--> {cnt/600.0*100:F2}");
//}

// var gwans = ro.ReadDict($"{path}/DCT/DATA/good_base.csv");
// Console.WriteLine("[] Init Gwans - data recv and pre-calc."  );

//void DoTestDNA()
//{
//    var gwan_codes = gwDB.Keys.ToArray();
//    foreach (var code in gwan_codes)
//    {
//        // test dna [maDayB, gapB, vDayB, maDayS, gapS, vDayS] 
//        foreach (var maDayB in DAYS)
//        {
//            foreach (var gapB in GAPS)
//            {
//                foreach (var vDayB in DAYS)
//                {
//                    foreach (var maDayS in DAYS)
//                    {
//                        foreach (var gapS in GAPS)
//                        {
//                            foreach (var vDayS in DAYS)
//                            {
//                                int[] dna = [maDayB, gapB, vDayB, maDayS, gapS, vDayS];
//                                var earn = TestDNA(gwDB[code], dna);
//                            }
//                        }
//                    }
//                }
//            }
//        }

//        Console.WriteLine(code);
//    }

//}


//// buy  : pc < maB-gapB && vBuy > 0
//// sell : pc > maS+gapS && vSell < 0

//// ma, v Day [10, 20, 30, 40, 50, 60]          5 ~ 60
//// gap       [3%, 5%, 10%, 15%, 20%]     0.01 ~ 0.20%
//double TestDNA(Dictionary<string, List<double>>cur, int[] dna)
//{
//    int maDayB = dna[0], gapB = dna[1], vDayB = dna[2];
//    int maDayS = dna[3], gapS = dna[4], vDayS = dna[5];

//    int maxDay = (new int[] {maDayB, vDayB, maDayS, vDayS}).Max();
//    double ttl_earn = 0.0;
//    double ttl_buy = 0.0, ttl_sell = 0.0, cur_buy = 0.0, cur_sell = 0.0;
//    int n_hold = 0;
//    for (int i=maxDay; i < cur["pcD"].Count; i++)
//    {
//        // check buy
//        if (cur["pcD"][i] < cur[$"ma{maDayB}"][i]*(1.0-gapB*0.01) && cur[$"v{vDayB}"][i] > 0) {
//            cur_buy += cur["pcD"][i];
//            n_hold += 1;
//        }

//        // check sell
//        if (n_hold>0 && cur["pcD"][i] < cur[$"ma{maDayS}"][i] * (1.0 + gapS * 0.01) && cur[$"v{vDayS}"][i] < 0)
//        {
//            ttl_sell += cur["pcD"][i];
//            n_hold -= 1;
//        }
//    }


//    return ttl_earn;
//}




// [ A123456 ]   
//       0.05%       0.10       
// 10 0.05 10.3) (10 0.05 10.3) (10 0.05 10.3) (10 0.05 10.3) (10 0.05 10.3)
// 20
// 30


//var df = ro.ReadDictString($"C:/_HDD/DCT/stock/A069500.csv");
//var pcD = df["pc"].ConvertAll(double.Parse).ToArray();

//Console.WriteLine($"{pcD[0]} ~ {pcD[1]}");
//var days = new int[] {10, 20, 40, 60, 90, 120};
//var gaps = new double[] {0.05, 0.10, 0.15, 0.20, 0.25, 0.30};

//Console.Write($"     ");
//foreach (var gap in gaps) Console.Write($"{gap}      ");
//Console.WriteLine();
//foreach (var day in days)
//{
//    Console.Write($" {day,2}   ");

//    foreach (var gap in gaps)
//    {
//        Console.Write($"{CalcEarnModel(day, gap),9:F0} ");
//    }
//    Console.WriteLine();
//}


//// return : earning, no_buy, no_sell
//double CalcEarnModel(int day, double gap)
//{
//    var n = pcD.Length;

//    int no_buy = 0, no_sell = 0, n_hold = 0;
//    double ttl_buy = 0, ttl_sell = 0;
//    double earning = 0.0;
//    for (int i = day; i<n; i++)
//    {
//        var cur = pcD[(i-day)..i].ToList();
//        var ma = cur.Average();
//        var pc = pcD[i];

//        // buy 
//        if (pc < ma*(1-gap))
//        {
//            no_buy++;
//            n_hold += 1;
//            ttl_buy += pc * 1;
//        }

//        // sell all
//        if ((pc > ma*(1+gap)) && n_hold>0)
//        {
//            no_sell++;

//            ttl_sell += pc * n_hold;
//            n_hold = 0;

//        }
//    }

//    // last hold
//    ttl_sell += n_hold * pcD[^1];

//    //earning = ttl_sell / ttl_buy;
//    earning = (ttl_sell - ttl_buy);
//    if (no_buy < 10) { earning = -9;  };

//    return earning;
//}
